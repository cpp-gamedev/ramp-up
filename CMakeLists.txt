cmake_minimum_required(VERSION 3.13 FATAL_ERROR)

set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "")
set(APP_VERSION "1.0.0.0" CACHE STRING "Application Version" FORCE)
set(APP_NAME "ramp-up")
project(${APP_NAME} VERSION ${APP_VERSION})

# Includes
include(cmake/platform.cmake)
include(cmake/utils.cmake)

option(DOWNLOAD_SFML "Download SFML to ext/sfml (x64 Win/Linux only)" ON)
if(DOWNLOAD_SFML)
	set(SFML_EXT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ext/sfml/lib/cmake/SFML")
	if(NOT EXISTS ${SFML_EXT_DIR})
		if(GCC_RUNTIME)
			set(SFML_URL https://www.sfml-dev.org/files/SFML-2.5.1-linux-gcc-64-bit.tar.gz)
			set(SFML_ARCHIVE sfml-2.5.1.tar.gz)
		elseif(MSVC_RUNTIME)
			set(SFML_URL https://www.sfml-dev.org/files/SFML-2.5.1-windows-vc15-64-bit.zip)
			set(SFML_ARCHIVE sfml-2.5.1.zip)
		else()
			message(FATAL_ERROR "Unsupported build environment; provide SFML binaries manually!")
		endif()
		set(SFML_ROOT SFML-2.5.1)
		if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/ext/${SFML_ARCHIVE}")
			file(MAKE_DIRECTORY ext)
			message(STATUS "Downloading to ext/${SFML_ARCHIVE} from ${SFML_URL}")
			file(DOWNLOAD ${SFML_URL} "${CMAKE_CURRENT_SOURCE_DIR}/ext/${SFML_ARCHIVE}")
		endif()
		unzip_archive(${SFML_ARCHIVE} "${CMAKE_CURRENT_SOURCE_DIR}/ext")
		file(RENAME "${CMAKE_CURRENT_SOURCE_DIR}/ext/${SFML_ROOT}" "${CMAKE_CURRENT_SOURCE_DIR}/ext/sfml")
	endif()
	if(NOT EXISTS ${SFML_EXT_DIR})
		message(WARNING "Failed to download/setup SFML!")
	else()
		set(SFML_DIR ${SFML_EXT_DIR})
	endif()
endif()

# Dependencies
if(PLATFORM STREQUAL "Windows")
	set(SFML_STATIC_LIBRARIES ON CACHE BOOL "" FORCE)
endif()
find_package(SFML REQUIRED COMPONENTS graphics audio)

# Git operations
set(GIT_COMMIT_HASH "[unknown]")
find_package(Git QUIET)
if(GIT_FOUND AND EXISTS "${CMAKE_SOURCE_DIR}/.git")
	get_git_commit_hash(GIT_COMMIT_HASH)
	if ("${CMAKE_CURRENT_SOURCE_DIR}" STREQUAL "${CMAKE_SOURCE_DIR}")
		option(GIT_UPDATE_SUBMODULES "Init/Update submodules during generation" ON)
	else()
		option(GIT_UPDATE_SUBMODULES "Init/Update submodules during generation" OFF)
	endif()
	if(GIT_UPDATE_SUBMODULES)
		update_git_submodules(1)
	endif()
endif()

# Constants
set(GIT_COMMIT_HASH ${GIT_COMMIT_HASH} CACHE STRING "Commit hash" FORCE)

# Interface
include(cmake/interface.cmake)

# Header text
set(BUILD_CONFIG ${CMAKE_BUILD_TYPE})
if(CMAKE_CONFIGURATION_TYPES)
	set(BUILD_CONFIG "Multi-config")
endif()
message(STATUS "[${CMAKE_SYSTEM_PROCESSOR}] [${PLATFORM}] [${CMAKE_GENERATOR}] [${CMAKE_CXX_COMPILER_ID}] [${BUILD_CONFIG}]")
if(CI_BUILD)
	message(STATUS "== CI Build ==")
endif()

# Executable
file(GLOB_RECURSE SOURCES CONFIGURE_DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/src/*.*pp")
source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}" FILES ${SOURCES})
add_executable(${APP_NAME} ${SOURCES})
target_link_libraries(${APP_NAME} PRIVATE sfml-graphics sfml-audio interface-lib)
if(W_MSBUILD)
	set_property(DIRECTORY ${CMAKE_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${APP_NAME})
endif()
